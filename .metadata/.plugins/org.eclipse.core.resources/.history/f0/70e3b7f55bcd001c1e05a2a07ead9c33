package com.lucky.practice;

import java.util.ArrayList;
import java.util.Arrays;

public class PrefixSumArray {

	public static void main(String[] args) {
		ArrayList<Integer> arr = new ArrayList<>(Arrays.asList(12,3,2,1,1,10,21,35,50));
		ArrayList<Integer> prefixSumArray = generatePrefixSumArray(arr);
		System.out.println(prefixSumArray);
		System.out.println(getSum(prefixSumArray, 0, 2));
		System.out.println(getSum(prefixSumArray, 2, 5));
		maxOccuring(new ArrayList<>(Arrays.asList(1,2,3)),new ArrayList<>(Arrays.asList(3,5,7)));

	}
	/**
	 * To answer many queries we can use a prefix sum array pre constructed on 
	 * O(n) time and then answer the queries in O(n) time.
	 */
	public static ArrayList<Integer> generatePrefixSumArray(ArrayList<Integer> arr) {
		ArrayList<Integer> prefixSumArray = new ArrayList<>();
		prefixSumArray.add(arr.get(0));
		for(int i=1;i<arr.size();i++) {
			prefixSumArray.add(arr.get(i)+prefixSumArray.get(i-1));
		}
		return prefixSumArray;
	}
	/**
	 * Finds the sum of the subarray to be counted with
	 * lower and upper indices(both inclusive)
	 */
	public static int getSum(ArrayList<Integer> prefixSumArray, int lower,int upper) {
		if(lower==0) return prefixSumArray.get(upper);
		else return prefixSumArray.get(upper)-prefixSumArray.get(lower-1);
	}
	/**
	 * To check if an array has an equilibrium point(an element where the sum
	 * on both the sides is equal)
	 * 2 traversals of the array. O(n) time complexity. Aux space O(1)
	 */
	public static boolean isEquilibriumPresent(ArrayList<Integer> arr) {
		int sum =0 ;
		for(int i=0;i<arr.size();i++) {
			sum+=arr.get(i);
		}
		int lSum = 0; int rSum=sum;
		for(int i=0;i<arr.size();i++) {
			if(lSum==rSum-arr.get(i)) return true;
			lSum+=arr.get(i);
			rSum-=arr.get(i);
		}
		return false;
	}
	/**
	 * Tricky Question
	 * Find the maximum occuring number in the following ranges
	 */
	public static void maxOccuring(ArrayList<Integer> L,ArrayList<Integer> R) {
		ArrayList<Integer> arr = new ArrayList<Integer>(1000);
		arr.set(100, 0);
		System.out.println(arr);
	}
}
