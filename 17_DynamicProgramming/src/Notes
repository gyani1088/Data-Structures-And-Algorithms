Memoization - Top down approach
Tabulation - Bottom up approach

In top down, we directly call for n and if the value isn't there for it's dependent calls on n-1,n-2.... so on then we
calculate it. The idea is to check if a sub-problem is already solved in the process of solving the main problem.

In the bottom up approach, we call from the base case to eventually calculate the value for a given n, by going from the
smallest available calculations and building up the calculations for subsequent values till we get the value for the asked
value. All the dependencies must already be present in the table.

Variations of Longest Common Subsequence(LCS)
1. Diff Utility -- differences between 2 files. e.g GIT
2. Minimum insertions and deletions to convert s1 to s2 --------- comes in competitive programming
3. Shortest common supersequence e.g. s1=GEEK s2=GEFK then supersequence may look like GEEFK
4. longest palindrome subsequence . reverse the given string and find the lcs between current string and its reverse
5. longest repeating subsequnece
6. find an optimized DP solution version of lcs
*7. printing LCS - we build the lcs array and whenever LCS decreases from it top left diagonal number we add the character
    to the end string.

Applications of Edit distance:
We can store the wrong words with edit distances 1 or 2 znd show auto suggestions of correct words

Variations of LongestIncreasingSubsequence:
1.Minimum no. of deletions to make an array sorted
2.Maximum sum increasing subsequence
3.Maximum length bitonic subsequence
4.Maximum no. of bridges that can be built
5.Longest chain of pairs
